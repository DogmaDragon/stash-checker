import {getValue, setValue} from "./storage";
import {request} from "../request";
import {StashEndpoint} from "../dataTypes";
import {getSettingsSection, newSettingsSection} from "./settings";

export let stashEndpoints: StashEndpoint[] = [];

export async function initEndpointSettings() {
    let defaultData: StashEndpoint[] = [{
        name: "Localhost",
        url: "http://localhost:9999/graphql",
        key: "",
    }];
    stashEndpoints = await getValue<StashEndpoint[]>("stashEndpoints", defaultData);

    let endpointSection = newSettingsSection("endpoints", "Stash Endpoints", "The GraphQL endpoint URL can be generated by appending '/graphql' to your Stash base URL. The API key can be found on your security settings page. Leave the field empty, if none is required.");

    let endpoints = document.createElement("div");
    endpoints.id = "stashChecker-endpoints";
    endpoints.classList.add("stashChecker", "endpoints");
    endpointSection.append(endpoints);

    await updateEndpoints(endpoints);
}

async function updateEndpoints(container: Element) {
    let endpointList = stashEndpoints.map((endpoint: StashEndpoint, index: number) => {
        let div = document.createElement("div");
        div.classList.add("stashChecker", "endpoint");
        div.innerHTML = `<div><h3>${endpoint.name}</h3><p>${endpoint.url}</p></div>`
        getVersion(endpoint, div.querySelector("h3"))

        let editButton = document.createElement("button");
        editButton.classList.add("stashChecker", "btn", "btn-primary")
        editButton.setAttribute("data-index", index.toString());
        editButton.addEventListener("click", editEndpointListener);
        editButton.innerHTML = "Edit";
        div.append(editButton);

        let deleteButton = document.createElement("button");
        deleteButton.classList.add("stashChecker", "btn", "btn-danger")
        deleteButton.setAttribute("data-index", index.toString());
        deleteButton.addEventListener("click", deleteEndpointListener);
        deleteButton.innerHTML = "Delete";
        div.append(deleteButton);

        return div;
    });
    // Add button dummy endpoint
    let div = document.createElement("div");
    div.classList.add("stashChecker", "endpoint");
    div.innerHTML = "<div></div>"
    endpointList.push(div)

    let addButton = document.createElement("button");
    addButton.classList.add("stashChecker", "btn", "btn-primary")
    addButton.addEventListener("click", addEndpointListener);
    addButton.innerHTML = "Add";
    div.append(addButton);

    container.replaceChildren(...endpointList)
}

async function addEndpointListener(this: HTMLButtonElement) {
    let newEndpoint: StashEndpoint = {
        name: prompt("Name:")?.trim()?? "",
        url: prompt("URL:")?.trim()?? "",
        key: prompt("API Key:")?.trim()?? "",
    };
    stashEndpoints.push(newEndpoint);
    void setValue("stashEndpoints", stashEndpoints);
    await updateEndpoints(getSettingsSection("endpoints"));
}

async function editEndpointListener(this: HTMLButtonElement) {
    let index = parseInt(this.getAttribute("data-index"));
    let oldEndpoint: StashEndpoint = stashEndpoints[index];

    stashEndpoints[index] = {
        name: prompt("Name:", oldEndpoint.name)?.trim() ?? oldEndpoint.name,
        url: prompt("URL:", oldEndpoint.url)?.trim() ?? oldEndpoint.url,
        key: prompt("API Key:", oldEndpoint.key)?.trim() ?? oldEndpoint.key,
    };
    void setValue("stashEndpoints", stashEndpoints);
    await updateEndpoints(getSettingsSection("endpoints"));
}

async function deleteEndpointListener(this: HTMLButtonElement) {
    let index = parseInt(this.getAttribute("data-index"));
    stashEndpoints.splice(index, 1);
    void setValue("stashEndpoints", stashEndpoints);
    await updateEndpoints(getSettingsSection("endpoints"));
}

async function getVersion(endpoint: StashEndpoint, element: HTMLElement) {
    let resolve = (data: any) => {
        element.innerHTML += `<span class="version"> (${data.version})</span>`
    }
    let reject = (message?: string) => {
        let explanation = "no connection";
        if (message) explanation = message.length < 30 ? message?.trim() : "wrong URL"
        element.innerHTML += `<span class="version"> (${explanation})</span>`
    }
    await request(endpoint, "version{version}")
        .then(resolve).catch(reject)
}
