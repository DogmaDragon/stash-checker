import {getValue, setValue, StorageKey} from "./storage";
import {request} from "../request";
import {StashEndpoint} from "../dataTypes";
import {buttonDanger, buttonPrimary, getSettingsSection, newSettingsSection} from "./settings";

const defaultData: StashEndpoint[] = [{
    name: "Localhost",
    url: "http://localhost:9999/graphql",
    key: "",
}];

export const stashEndpoints: StashEndpoint[] = await getValue<StashEndpoint[]>(StorageKey.StashEndpoints, defaultData);

export async function initEndpointSettings() {
    let description = "The GraphQL endpoint URL can be generated by appending '/graphql' to your Stash base URL. The API key can be found on your security settings page. Leave the field empty, if none is required."
    let endpointSection = newSettingsSection("endpoints", "Stash Endpoints", description);
    endpointSection.classList.add("flex-column");
    await updateEndpoints(endpointSection);
}

async function updateEndpoints(container: Element) {
    let endpointList = stashEndpoints.map((endpoint: StashEndpoint, index: number) => {
        let div = document.createElement("div");
        div.classList.add("stashChecker", "endpoint");
        div.innerHTML = `<div><h3>${endpoint.name}</h3><p>${endpoint.url}</p></div>`
        getVersion(endpoint, div.querySelector("h3")!)

        let editButton = buttonPrimary("Edit", editEndpointListener)
        editButton.setAttribute("data-index", index.toString());
        div.append(editButton);

        let deleteButton = buttonDanger("Delete", deleteEndpointListener);
        deleteButton.setAttribute("data-index", index.toString());
        div.append(deleteButton);

        return div;
    });
    // Add button dummy endpoint
    let div = document.createElement("div");
    div.classList.add("stashChecker", "endpoint");
    div.innerHTML = "<div></div>"
    div.append(
        buttonPrimary("Add", addEndpointListener)
    );
    endpointList.push(div)

    container.replaceChildren(...endpointList)
}

async function addEndpointListener(this: HTMLButtonElement) {
    let newEndpoint: StashEndpoint = {
        name: prompt("Name:")?.trim()?? "",
        url: prompt("URL:")?.trim()?? "",
        key: prompt("API Key:")?.trim()?? "",
    };
    stashEndpoints.push(newEndpoint);
    void setValue(StorageKey.StashEndpoints, stashEndpoints);
    await updateEndpoints(getSettingsSection("endpoints")!);
}

async function editEndpointListener(this: HTMLButtonElement) {
    let index = parseInt(this.getAttribute("data-index")!);
    let oldEndpoint: StashEndpoint = stashEndpoints[index];

    stashEndpoints[index] = {
        name: prompt("Name:", oldEndpoint.name)?.trim() ?? oldEndpoint.name,
        url: prompt("URL:", oldEndpoint.url)?.trim() ?? oldEndpoint.url,
        key: prompt("API Key:", oldEndpoint.key)?.trim() ?? oldEndpoint.key,
    };
    void setValue(StorageKey.StashEndpoints, stashEndpoints);
    await updateEndpoints(getSettingsSection("endpoints")!);
}

async function deleteEndpointListener(this: HTMLButtonElement) {
    let index = parseInt(this.getAttribute("data-index")!);
    stashEndpoints.splice(index, 1);
    void setValue(StorageKey.StashEndpoints, stashEndpoints);
    await updateEndpoints(getSettingsSection("endpoints")!);
}

async function getVersion(endpoint: StashEndpoint, element: HTMLElement) {
    let resolve = (data: any) => {
        element.innerHTML += `<span class="version"> (${data.version})</span>`
    }
    let reject = (message?: string) => {
        let explanation = "no connection";
        if (message) explanation = message.length < 30 ? message?.trim() : "wrong URL"
        element.innerHTML += `<span class="version"> (${explanation})</span>`
    }
    await request(endpoint, "version{version}")
        .then(resolve).catch(reject)
}
